package kevbar6.portalgun.world.generation;

import kevbar6.portalgun.init.BlockInit;
import net.minecraft.block.Block;
import net.minecraft.block.BlockLog;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.gen.feature.WorldGenAbstractTree;
import net.minecraftforge.common.IPlantable;

import java.util.Random;

import static net.minecraft.block.BlockLog.LOG_AXIS;

public class BWoodTree2 extends WorldGenAbstractTree
    {
        public static final IBlockState LOG = BlockInit.BWOOD_LOG.getDefaultState();
        public static final IBlockState LOG1 = BlockInit.BWOOD_LOG.getDefaultState().withProperty(LOG_AXIS, BlockLog.EnumAxis.X);
        public static final IBlockState LOG2 = BlockInit.BWOOD_LOG.getDefaultState().withProperty(LOG_AXIS, BlockLog.EnumAxis.Z);
        public static final IBlockState LEAF = BlockInit.BWOOD_LEAVES.getDefaultState();

        //public static final IBlockState LOG = Blocks.LOG.getDefaultState();
        //public static final IBlockState LOG1 = Blocks.LOG.getDefaultState().withProperty(LOG_AXIS, BlockLog.EnumAxis.X);
        //public static final IBlockState LOG2 = Blocks.LOG.getDefaultState().withProperty(LOG_AXIS, BlockLog.EnumAxis.Z);
        //public static final IBlockState LEAF = Blocks.LEAVES.getDefaultState();

        //private final int minHeight;
        private int minHeight;

	public BWoodTree2()
        {
            super(false);
            //this.minHeight = 12;
            //this.minHeight = 6;
        }

        @Override
        public boolean generate(World world, Random rand, BlockPos pos) {
            int a = (int) (Math.random() * 3);
            if (a == 0) {
                BlockPos pos01 = new BlockPos(pos.getX(), pos.getY(), pos.getZ());
                BlockPos pos02 = new BlockPos(pos.getX() + 1, pos.getY(), pos.getZ());
                BlockPos pos03 = new BlockPos(pos.getX(), pos.getY(), pos.getZ() - 1);
                BlockPos pos04 = new BlockPos(pos.getX() + 1, pos.getY(), pos.getZ() - 1);

                boolean isSoil0 = world.getBlockState(pos01.down()).getBlock().canSustainPlant(world.getBlockState(pos01.down()), world, pos01.down(), net.minecraft.util.EnumFacing.UP, (net.minecraft.block.BlockSapling) Blocks.SAPLING);
                boolean isSoil1 = world.getBlockState(pos02.down()).getBlock().canSustainPlant(world.getBlockState(pos02.down()), world, pos02.down(), net.minecraft.util.EnumFacing.UP, (net.minecraft.block.BlockSapling) Blocks.SAPLING);
                boolean isSoil2 = world.getBlockState(pos03.down()).getBlock().canSustainPlant(world.getBlockState(pos03.down()), world, pos03.down(), net.minecraft.util.EnumFacing.UP, (net.minecraft.block.BlockSapling) Blocks.SAPLING);
                boolean isSoil3 = world.getBlockState(pos04.down()).getBlock().canSustainPlant(world.getBlockState(pos04.down()), world, pos04.down(), net.minecraft.util.EnumFacing.UP, (net.minecraft.block.BlockSapling) Blocks.SAPLING);
                if(pos.getY() + 9 < 256 && isSoil0 && isSoil1 && isSoil2 && isSoil3){




                    for (int i = 0; i < 9; i++) {
                    //log
                    BlockPos pos1 = new BlockPos(pos.getX(), pos.getY() + i, pos.getZ());
                    BlockPos pos2 = new BlockPos(pos.getX() + 1, pos.getY() + i, pos.getZ());
                    BlockPos pos3 = new BlockPos(pos.getX(), pos.getY() + i, pos.getZ() - 1);
                    BlockPos pos4 = new BlockPos(pos.getX() + 1, pos.getY() + i, pos.getZ() - 1);

                    BlockPos pos5 = new BlockPos(pos.getX() + 2, pos.getY() + i, pos.getZ());
                    BlockPos pos6 = new BlockPos(pos.getX() + 3, pos.getY() + i, pos.getZ());

                    BlockPos pos7 = new BlockPos(pos.getX(), pos.getY() + i, pos.getZ() - 2);
                    BlockPos pos8 = new BlockPos(pos.getX(), pos.getY() + i, pos.getZ() - 3);

                    BlockPos pos9 = new BlockPos(pos.getX() - 1, pos.getY() + i, pos.getZ());
                    BlockPos pos10 = new BlockPos(pos.getX() - 2, pos.getY() + i, pos.getZ());

                    BlockPos pos11 = new BlockPos(pos.getX(), pos.getY() + i, pos.getZ() + 2);
                    BlockPos pos12 = new BlockPos(pos.getX(), pos.getY() + i, pos.getZ() + 1);

                    BlockPos pos13 = new BlockPos(pos.getX() + 1, pos.getY() + i, pos.getZ() - 2);

                    BlockPos pos14 = new BlockPos(pos.getX() + 2, pos.getY() + i, pos.getZ() - 1);
                    //leaves
                    BlockPos pos15 = new BlockPos(pos.getX(), pos.getY() + i, pos.getZ() + 3);
                    BlockPos pos16 = new BlockPos(pos.getX() + 1, pos.getY() + i, pos.getZ() + 2);
                    BlockPos pos17 = new BlockPos(pos.getX() - 1, pos.getY() + i, pos.getZ() + 2);
                    BlockPos pos18 = new BlockPos(pos.getX() + 3, pos.getY() + i, pos.getZ() + 1);
                    BlockPos pos19 = new BlockPos(pos.getX() + 2, pos.getY() + i, pos.getZ() + 1);
                    BlockPos pos20 = new BlockPos(pos.getX() + 1, pos.getY() + i, pos.getZ() + 1);
                    BlockPos pos21 = new BlockPos(pos.getX() - 1, pos.getY() + i, pos.getZ() + 1);
                    BlockPos pos22 = new BlockPos(pos.getX() - 2, pos.getY() + i, pos.getZ() + 1);
                    BlockPos pos23 = new BlockPos(pos.getX() + 4, pos.getY() + i, pos.getZ());
                    BlockPos pos24 = new BlockPos(pos.getX() - 3, pos.getY() + i, pos.getZ());
                    BlockPos pos25 = new BlockPos(pos.getX() + 3, pos.getY() + i, pos.getZ() - 1);
                    BlockPos pos26 = new BlockPos(pos.getX() - 1, pos.getY() + i, pos.getZ() - 1);
                    BlockPos pos27 = new BlockPos(pos.getX() - 2, pos.getY() + i, pos.getZ() - 1);
                    BlockPos pos28 = new BlockPos(pos.getX() + 2, pos.getY() + i, pos.getZ() - 2);
                    BlockPos pos29 = new BlockPos(pos.getX() - 1, pos.getY() + i, pos.getZ() - 2);
                    BlockPos pos30 = new BlockPos(pos.getX() + 1, pos.getY() + i, pos.getZ() - 3);
                    BlockPos pos31 = new BlockPos(pos.getX() - 1, pos.getY() + i, pos.getZ() - 3);
                    BlockPos pos32 = new BlockPos(pos.getX(), pos.getY() + i, pos.getZ() - 4);

                    if (i < 8) {
                        //log
                        setBlockAndNotifyAdequately(world, pos1, LOG);
                        setBlockAndNotifyAdequately(world, pos4, LOG);
                    }

                    if (i < 3) {
                        //log
                        setBlockAndNotifyAdequately(world, pos2, LOG);
                        setBlockAndNotifyAdequately(world, pos3, LOG);
                    }
                    if (i == 2) {
                        //leaves
                        setBlockAndNotifyAdequately(world, pos5, LEAF);
                        setBlockAndNotifyAdequately(world, pos6, LEAF);
                        setBlockAndNotifyAdequately(world, pos7, LEAF);
                        setBlockAndNotifyAdequately(world, pos8, LEAF);
                    }


                    if (i == 3) {
                        //log
                        setBlockAndNotifyAdequately(world, pos2, LOG1);
                        setBlockAndNotifyAdequately(world, pos3, LOG2);
                        setBlockAndNotifyAdequately(world, pos5, LOG1);
                        setBlockAndNotifyAdequately(world, pos6, LOG);
                        setBlockAndNotifyAdequately(world, pos7, LOG2);
                        setBlockAndNotifyAdequately(world, pos8, LOG);
                        //leaves
                        setBlockAndNotifyAdequately(world, pos13, LEAF);
                        setBlockAndNotifyAdequately(world, pos14, LEAF);
                        setBlockAndNotifyAdequately(world, pos18, LEAF);
                        setBlockAndNotifyAdequately(world, pos19, LEAF);
                        setBlockAndNotifyAdequately(world, pos20, LEAF);
                        setBlockAndNotifyAdequately(world, pos23, LEAF);
                        setBlockAndNotifyAdequately(world, pos25, LEAF);
                        setBlockAndNotifyAdequately(world, pos26, LEAF);
                        setBlockAndNotifyAdequately(world, pos29, LEAF);
                        setBlockAndNotifyAdequately(world, pos30, LEAF);
                        setBlockAndNotifyAdequately(world, pos31, LEAF);
                        setBlockAndNotifyAdequately(world, pos32, LEAF);
                    }

                    if (i == 4) {
                        //log
                        setBlockAndNotifyAdequately(world, pos1, LOG);
                        setBlockAndNotifyAdequately(world, pos4, LOG);
                        setBlockAndNotifyAdequately(world, pos6, LOG);
                        setBlockAndNotifyAdequately(world, pos8, LOG);
                        //leaves
                        setBlockAndNotifyAdequately(world, pos2, LEAF);
                        setBlockAndNotifyAdequately(world, pos3, LEAF);
                        setBlockAndNotifyAdequately(world, pos5, LEAF);
                        setBlockAndNotifyAdequately(world, pos7, LEAF);
                        setBlockAndNotifyAdequately(world, pos18, LEAF);
                        setBlockAndNotifyAdequately(world, pos23, LEAF);
                        setBlockAndNotifyAdequately(world, pos25, LEAF);
                        setBlockAndNotifyAdequately(world, pos30, LEAF);
                        setBlockAndNotifyAdequately(world, pos31, LEAF);
                        setBlockAndNotifyAdequately(world, pos32, LEAF);

                    }

                    if (i == 5) {
                        //log
                        setBlockAndNotifyAdequately(world, pos1, LOG);
                        setBlockAndNotifyAdequately(world, pos4, LOG);
                        //leaves
                        setBlockAndNotifyAdequately(world, pos6, LEAF);
                        setBlockAndNotifyAdequately(world, pos8, LEAF);
                        setBlockAndNotifyAdequately(world, pos9, LEAF);
                        setBlockAndNotifyAdequately(world, pos10, LEAF);
                        setBlockAndNotifyAdequately(world, pos11, LEAF);
                        setBlockAndNotifyAdequately(world, pos12, LEAF);
                    }

                    if (i == 6) {
                        //log
                        setBlockAndNotifyAdequately(world, pos1, LOG);
                        setBlockAndNotifyAdequately(world, pos4, LOG);
                        setBlockAndNotifyAdequately(world, pos9, LOG1);
                        setBlockAndNotifyAdequately(world, pos10, LOG);
                        setBlockAndNotifyAdequately(world, pos11, LOG);
                        setBlockAndNotifyAdequately(world, pos12, LOG2);
                        //leaves
                        setBlockAndNotifyAdequately(world, pos2, LEAF);
                        setBlockAndNotifyAdequately(world, pos3, LEAF);
                        setBlockAndNotifyAdequately(world, pos13, LEAF);
                        setBlockAndNotifyAdequately(world, pos14, LEAF);
                        setBlockAndNotifyAdequately(world, pos15, LEAF);
                        setBlockAndNotifyAdequately(world, pos16, LEAF);
                        setBlockAndNotifyAdequately(world, pos17, LEAF);
                        setBlockAndNotifyAdequately(world, pos20, LEAF);
                        setBlockAndNotifyAdequately(world, pos21, LEAF);
                        setBlockAndNotifyAdequately(world, pos22, LEAF);
                        setBlockAndNotifyAdequately(world, pos24, LEAF);
                        setBlockAndNotifyAdequately(world, pos26, LEAF);
                        setBlockAndNotifyAdequately(world, pos27, LEAF);
                    }

                    if (i == 7) {
                        //log
                        setBlockAndNotifyAdequately(world, pos10, LOG);
                        setBlockAndNotifyAdequately(world, pos11, LOG);
                        setBlockAndNotifyAdequately(world, pos13, LOG);
                        setBlockAndNotifyAdequately(world, pos14, LOG);
                        //leafes
                        setBlockAndNotifyAdequately(world, pos1, LEAF);
                        setBlockAndNotifyAdequately(world, pos4, LEAF);
                        setBlockAndNotifyAdequately(world, pos5, LEAF);
                        setBlockAndNotifyAdequately(world, pos7, LEAF);
                        setBlockAndNotifyAdequately(world, pos9, LEAF);
                        setBlockAndNotifyAdequately(world, pos12, LEAF);
                        setBlockAndNotifyAdequately(world, pos15, LEAF);
                        setBlockAndNotifyAdequately(world, pos16, LEAF);
                        setBlockAndNotifyAdequately(world, pos17, LEAF);
                        setBlockAndNotifyAdequately(world, pos22, LEAF);
                        setBlockAndNotifyAdequately(world, pos24, LEAF);
                        setBlockAndNotifyAdequately(world, pos25, LEAF);
                        setBlockAndNotifyAdequately(world, pos27, LEAF);
                        setBlockAndNotifyAdequately(world, pos28, LEAF);
                        setBlockAndNotifyAdequately(world, pos30, LEAF);
                    }

                    if (i == 8) {
                        //leafes
                        setBlockAndNotifyAdequately(world, pos10, LEAF);
                        setBlockAndNotifyAdequately(world, pos11, LEAF);
                        setBlockAndNotifyAdequately(world, pos13, LEAF);
                        setBlockAndNotifyAdequately(world, pos14, LEAF);
                    }


                }
                return true;
            }
                else {
                    a = (int) (Math.random() * 2)+1;
            }

            }

            if (a == 1) {
                //1
                int i = rand.nextInt(3) + 5;


                boolean flag = true;

                if (pos.getY() >= 1 && pos.getY() + i + 1 <= 256) {
                    for (int j = pos.getY(); j <= pos.getY() + 1 + i; ++j) {
                        int k = 1;

                        if (j == pos.getY()) {
                            k = 0;
                        }

                        if (j >= pos.getY() + 1 + i - 2) {
                            k = 2;
                        }

                        BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();

                        for (int l = pos.getX() - k; l <= pos.getX() + k && flag; ++l) {
                            for (int i1 = pos.getZ() - k; i1 <= pos.getZ() + k && flag; ++i1) {
                                if (j >= 0 && j < world.getHeight()) {
                                    if (!this.isReplaceable(world, blockpos$mutableblockpos.setPos(l, j, i1))) {
                                        flag = false;
                                    }
                                } else {
                                    flag = false;
                                }
                            }
                        }
                    }

                    if (!flag) {
                        return false;
                    } else {
                        BlockPos down = pos.down();
                        IBlockState state = world.getBlockState(down);
                        boolean isSoil = state.getBlock().canSustainPlant(state, world, down, net.minecraft.util.EnumFacing.UP, (net.minecraft.block.BlockSapling) Blocks.SAPLING); ///////////////<<<<<----

                        if (isSoil && pos.getY() < world.getHeight() - i - 1) {
                            state.getBlock().onPlantGrow(state, world, down, pos);

                            for (int i2 = pos.getY() - 3 + i; i2 <= pos.getY() + i; ++i2) {
                                int k2 = i2 - (pos.getY() + i);
                                int l2 = 1 - k2 / 2;

                                for (int i3 = pos.getX() - l2; i3 <= pos.getX() + l2; ++i3) {
                                    int j1 = i3 - pos.getX();

                                    for (int k1 = pos.getZ() - l2; k1 <= pos.getZ() + l2; ++k1) {
                                        int l1 = k1 - pos.getZ();

                                        if (Math.abs(j1) != l2 || Math.abs(l1) != l2 || rand.nextInt(2) != 0 && k2 != 0) {
                                            BlockPos blockpos = new BlockPos(i3, i2, k1);
                                            IBlockState state2 = world.getBlockState(blockpos);

                                            if (state2.getBlock().isAir(state2, world, blockpos) || state2.getBlock().isAir(state2, world, blockpos)) {
                                                this.setBlockAndNotifyAdequately(world, blockpos, LEAF);
                                            }
                                        }
                                    }
                                }
                            }

                            for (int j2 = 0; j2 < i; ++j2) {
                                BlockPos upN = pos.up(j2);
                                IBlockState state2 = world.getBlockState(upN);

                                if (state2.getBlock().isAir(state2, world, upN) || state2.getBlock().isLeaves(state2, world, upN)) {
                                    this.setBlockAndNotifyAdequately(world, pos.up(j2), LOG);
                                }
                            }

                            return true;
                        } else {
                            return false;
                        }
                    }
                } else {
                    return false;
                }


            }

            if (a==2){
                minHeight = 12;

                int height = this.minHeight + rand.nextInt(3);
                boolean flag = true;

                int x = pos.getX();
                int y = pos.getY();
                int z = pos.getZ();

                for (int yPos = y; yPos <= y + 1 + height; yPos++) {
                    int b0 = 2;
                    if (yPos == y) b0 = 1;
                    if (yPos >= y + 1 + height - 2) b0 = 2;

                    BlockPos.MutableBlockPos mutable = new BlockPos.MutableBlockPos();

                    for (int xPos = x - b0; xPos <= x + b0 && flag; xPos++) {
                        for (int zPos = z - b0; zPos < -z + b0 && flag; zPos++) {
                            if (yPos >= 0 && yPos < world.getHeight()) {
                                if (!this.isReplaceable(world, new BlockPos(xPos, yPos, zPos))) {
                                    flag = false;
                                }
                            } else {
                                flag = false;
                            }
                        }
                    }
                }

                if (!flag) {
                    return false;
                } else {
                    BlockPos down = pos.down();
                    IBlockState state = world.getBlockState(down);
                    boolean isSoil = state.getBlock().canSustainPlant(state, world, down, EnumFacing.UP, (IPlantable) Blocks.SAPLING);

                    if (isSoil && y < world.getHeight() - height - 1) {
                        state.getBlock().onPlantGrow(state, world, down, pos);

                        for (int yPos = y - 3 + height; yPos <= y + height; yPos++) {
                            int b1 = yPos - (y + height);
                            int b2 = 1 - b1 / 2;

                            for (int xPos = x - b2; xPos <= x + b2; xPos++) {
                                int b3 = xPos - x;
                                for (int zPos = z - b2; zPos <= z + b2; zPos++) {
                                    int b4 = zPos - z;
                                    if (Math.abs(b3) != b2 || Math.abs(b4) != b2 || rand.nextInt(2) != 0 && b1 != 0) {
                                        BlockPos treePos = new BlockPos(xPos, yPos, zPos);
                                        IBlockState treeState = world.getBlockState(treePos);
                                        if (treeState.getBlock().isAir(treeState, world, treePos) || treeState.getBlock().isAir(treeState, world, treePos)) {
                                            this.setBlockAndNotifyAdequately(world, treePos, LEAF);
                                            this.setBlockAndNotifyAdequately(world, treePos.add(0, -0.25 * height, 0), LEAF);
                                            this.setBlockAndNotifyAdequately(world, treePos.add(0, -0.5 * height, 0), LEAF);
                                        }
                                    }
                                }
                            }
                        }

                        for (int logHeight = 0; logHeight < height; logHeight++) {
                            BlockPos up = pos.up(logHeight);
                            IBlockState logState = world.getBlockState(up);

                            if (logState.getBlock().isAir(logState, world, up) || logState.getBlock().isLeaves(logState, world, up)) {
                                this.setBlockAndNotifyAdequately(world, pos.up(logHeight), LOG);
                            }
                        }

                        return true;
                    }
                }

                return true;
            }
            return false;
        }

        @Override
        protected boolean canGrowInto(Block blockType)
        {
            Material material = blockType.getDefaultState().getMaterial();
            return material == Material.AIR || material == Material.LEAVES || material == Material.GROUND || blockType == Blocks.GRASS || blockType == Blocks.DIRT || blockType == Blocks.LOG || blockType == Blocks.LOG2 || blockType == Blocks.SAPLING || blockType == Blocks.VINE;

        }
    }

